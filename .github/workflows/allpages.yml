name: Fetch all pages

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  fetch_pages:
    runs-on: ubuntu-latest

    env:
      WIKI_API_URL: https://youtube.fandom.com/api.php

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fetch and save - Part 1
        id: fetch_and_save_part1
        continue-on-error: true
        timeout-minutes: 359
        run: |
          ALL_PAGES=""
          CONTINUE=""
          ATTEMPTS=0

          while [[ -n "$CONTINUE" || -z "$ALL_PAGES" ]]; do
            ATTEMPTS=$((ATTEMPTS + 1))
            echo "Fetching pages - Attempt $ATTEMPTS"

            RESPONSE=$(curl -s "$WIKI_API_URL" \
                -d "action=query" \
                -d "list=allpages" \
                -d "aplimit=max" \
                -d "apcontinue=$CONTINUE" \
                -d "maxlag=5" \
                -d "format=json")
            
            if [[ "$(echo "$RESPONSE" | jq -r '.error?.code')" == "maxlag" ]]; then
              echo "API is lagging. Retrying in 3 seconds..."
              sleep 3
              continue
            fi

            LAST_PAGE_TITLE=$(echo "$RESPONSE" | jq -r '.query.allpages | last(.[]) | .title')
            echo "Last page title: $LAST_PAGE_TITLE"
            echo "cURL result: $RESPONSE"

            ALL_PAGES+="$(echo "$RESPONSE" | jq -r '.query.allpages[].title')\n"
            CONTINUE=$(echo "$RESPONSE" | jq -r '.continue?.apcontinue')
          done

          echo -e "$ALL_PAGES" > pages_part1.txt
          echo "Part 1 of pages fetched and saved."

      - name: Save part 1 artifact
        uses: actions/upload-artifact@v3
        with:
          name: pages_part1
          path: pages_part1.txt

  fetch_pages_part2:
    needs: fetch_pages
    runs-on: ubuntu-latest

    steps:
      - name: Fetch and save - Part 2
        continue-on-error: true
        timeout-minutes: 359
        run: |
          ALL_PAGES=""
          CONTINUE=""
          ATTEMPTS=0

          while [[ -n "$CONTINUE" || -z "$ALL_PAGES" ]]; do
            ATTEMPTS=$((ATTEMPTS + 1))
            echo "Fetching pages - Attempt $ATTEMPTS"

            RESPONSE=$(curl -s "$WIKI_API_URL" \
                -d "action=query" \
                -d "list=allpages" \
                -d "aplimit=max" \
                -d "apcontinue=$CONTINUE" \
                -d "maxlag=5" \
                -d "format=json")
            
            if [[ "$(echo "$RESPONSE" | jq -r '.error?.code')" == "maxlag" ]]; then
              echo "API is lagging. Retrying in 3 seconds..."
              sleep 3
              continue
            fi

            LAST_PAGE_TITLE=$(echo "$RESPONSE" | jq -r '.query.allpages | last(.[]) | .title')
            echo "Last page title: $LAST_PAGE_TITLE"
            echo "cURL result: $RESPONSE"

            ALL_PAGES+="$(echo "$RESPONSE" | jq -r '.query.allpages[].title')\n"
            CONTINUE=$(echo "$RESPONSE" | jq -r '.continue?.apcontinue')
          done

          echo -e "$ALL_PAGES" > pages_part2.txt
          echo "Part 2 of pages fetched and saved."

      - name: Save part 2 artifact
        uses: actions/upload-artifact@v3
        with:
          name: pages_part2
          path: pages_part2.txt

  merge_and_commit:
    needs: [fetch_pages, fetch_pages_part2]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: pages_part1
          path: pages_part1

      - name: Download part 2 artifact
        uses: actions/download-artifact@v3
        with:
          name: pages_part2
          path: pages_part2

      - name: Merge and save pages
        run: |
          cat pages_part2/pages_part2.txt >> pages_part1/pages_part1.txt
          mv pages_part1/pages_part1.txt allpages.txt
        continue-on-error: true

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add allpages.txt
          git commit -m "Update allpages.txt"
          git push
